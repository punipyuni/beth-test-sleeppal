"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  ErrorBoundary: () => import_error_boundary.ErrorBoundary,
  Html: () => import_html2.Html,
  createElement: () => createElement,
  default: () => html,
  html: () => html,
  isHtml: () => isHtml,
  isTagHtml: () => isTagHtml
});
module.exports = __toCommonJS(src_exports);

// src/h.ts
var import_html = require("@kitajs/html");
var createElement = (name, attrs, ...children) => {
  const { $elysia, ...attr } = attrs ?? {};
  return (0, import_html.createElement)(name, attr, ...children);
};

// src/html.ts
var import_elysia = require("elysia");
var import_node_stream = require("stream");
var import_suspense = require("@kitajs/html/suspense");

// src/handler.ts
var import_stream = require("stream");

// src/utils.ts
function isHtml(value) {
  if (typeof value !== "string")
    return false;
  value = value.trim();
  const length = value.length;
  return (
    // Minimum html is 7 characters long: <a></a>
    length >= 7 && // open tag
    value[0] === "<" && // close tag
    value[length - 1] === ">"
  );
}
function isTagHtml(value) {
  return value.trimStart().slice(0, 5).startsWith("<html");
}

// src/handler.ts
function handleHtml(value, options, hasContentType) {
  if (value instanceof Promise) {
    return value.then((v) => handleHtml(v, options, hasContentType));
  }
  if (typeof value === "string") {
    if (options.autoDoctype && isHtml(value) && // Avoids double adding !doctype or adding to non root html tags.
    isTagHtml(value))
      value = "<!doctype html>" + value;
    return new Response(
      value,
      hasContentType ? void 0 : { headers: { "content-type": options.contentType } }
    );
  }
  let stream = import_stream.Readable.toWeb(value);
  if (options.autoDoctype) {
    let first = true;
    stream = stream.pipeThrough(
      new TransformStream({
        transform(chunk, controller) {
          let str = chunk.toString();
          if (first && isTagHtml(str) && // Avoids double adding !doctype or adding to non root html tags.
          isTagHtml(str)) {
            first = false;
            str = "<!doctype html>" + str;
          }
          controller.enqueue(str);
        }
      })
    );
  }
  return new Response(
    stream,
    hasContentType ? void 0 : { headers: { "content-type": options.contentType } }
  );
}

// src/html.ts
function html(options = {}) {
  options.contentType ??= "text/html; charset=utf8";
  options.autoDetect ??= true;
  options.isHtml ??= isHtml;
  options.autoDoctype ??= true;
  const instance = new import_elysia.Elysia({
    name: "@elysiajs/html",
    seed: options
  }).derive({ as: "global" }, function htmlPlugin({ set }) {
    return {
      html(value) {
        return handleHtml(value, options, "content-type" in set.headers);
      },
      stream(value, args) {
        return handleHtml(
          (0, import_suspense.renderToStream)(
            (id) => value({ ...args, id })
          ),
          options,
          "content-type" in set.headers
        );
      }
    };
  });
  if (options.autoDetect)
    return instance.mapResponse(
      { as: "global" },
      async function handlerPossibleHtml({ response: value, set }) {
        if (
          // Simple html string
          isHtml(value) || // @kitajs/html stream
          value instanceof import_node_stream.Readable && "rid" in value
        ) {
          const response = await handleHtml(
            value,
            options,
            "content-type" in set.headers
          );
          if (response instanceof Response) return response;
          set.headers["content-type"] = options.contentType;
          return new Response(response);
        }
        return void 0;
      }
    );
  return instance;
}

// src/index.ts
var import_error_boundary = require("@kitajs/html/error-boundary");
var import_html2 = require("@kitajs/html");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ErrorBoundary,
  Html,
  createElement,
  html,
  isHtml,
  isTagHtml
});
