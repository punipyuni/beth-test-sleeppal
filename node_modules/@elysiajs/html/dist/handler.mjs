// src/handler.ts
import { Readable } from "stream";

// src/utils.ts
function isHtml(value) {
  if (typeof value !== "string")
    return false;
  value = value.trim();
  const length = value.length;
  return (
    // Minimum html is 7 characters long: <a></a>
    length >= 7 && // open tag
    value[0] === "<" && // close tag
    value[length - 1] === ">"
  );
}
function isTagHtml(value) {
  return value.trimStart().slice(0, 5).startsWith("<html");
}

// src/handler.ts
function handleHtml(value, options, hasContentType) {
  if (value instanceof Promise) {
    return value.then((v) => handleHtml(v, options, hasContentType));
  }
  if (typeof value === "string") {
    if (options.autoDoctype && isHtml(value) && // Avoids double adding !doctype or adding to non root html tags.
    isTagHtml(value))
      value = "<!doctype html>" + value;
    return new Response(
      value,
      hasContentType ? void 0 : { headers: { "content-type": options.contentType } }
    );
  }
  let stream = Readable.toWeb(value);
  if (options.autoDoctype) {
    let first = true;
    stream = stream.pipeThrough(
      new TransformStream({
        transform(chunk, controller) {
          let str = chunk.toString();
          if (first && isTagHtml(str) && // Avoids double adding !doctype or adding to non root html tags.
          isTagHtml(str)) {
            first = false;
            str = "<!doctype html>" + str;
          }
          controller.enqueue(str);
        }
      })
    );
  }
  return new Response(
    stream,
    hasContentType ? void 0 : { headers: { "content-type": options.contentType } }
  );
}
export {
  handleHtml
};
