#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const node_fs_1 = tslib_1.__importDefault(require("node:fs"));
const node_path_1 = tslib_1.__importDefault(require("node:path"));
const typescript_1 = tslib_1.__importDefault(require("typescript"));
const yargs_1 = tslib_1.__importDefault(require("yargs"));
const helpers_1 = require("yargs/helpers");
const util_1 = require("./util");
const { version } = require('../package.json');
const help = `

@kitajs/ts-html-plugin v${version} - A CLI tool & TypeScript LSP for finding XSS vulnerabilities in your TypeScript code.

Usage: xss-scan         [options] <file> <file>...
       ts-html-plugin   [options] <file> <file>...

Options:
  --cwd <path>          The current working directory to use (defaults to process.cwd())
  -p, --project <path>  The path to the tsconfig.json file to use (defaults to 'tsconfig.json')
  -s, --simplified      Use simplified diagnostics
  -h, --help            Show this help message
  --version             Show the version number
  <file> <file>...      The files to check (defaults to all files in tsconfig.json)

Examples:
  $ xss-scan
  $ xss-scan --cwd src
  $ xss-scan --project tsconfig.build.json
  $ xss-scan src/index.tsx src/App.tsx

Exit codes:
  0 - No XSS vulnerabilities were found
  1 - XSS vulnerabilities were found
  2 - Only warnings were found

`.trim();
function readCompilerOptions(tsconfigPath) {
    const { config, error } = typescript_1.default.readConfigFile(tsconfigPath, typescript_1.default.sys.readFile);
    if (error) {
        return { errors: [error] };
    }
    const { options, errors, fileNames } = typescript_1.default.parseJsonConfigFileContent(config, typescript_1.default.sys, node_path_1.default.dirname(tsconfigPath), undefined, tsconfigPath);
    if (errors.length) {
        return { errors };
    }
    return { options, fileNames, errors: undefined };
}
function prettyPrintErrorCount(diagnostics, root) {
    const files = new Map();
    // Counts the amount of errors per file
    for (const diagnostic of diagnostics) {
        if (!diagnostic.file) {
            continue;
        }
        const file = files.get(diagnostic.file.fileName);
        if (file !== undefined) {
            files.set(diagnostic.file.fileName, file + 1);
            continue;
        }
        files.set(diagnostic.file.fileName, 1);
    }
    if (files.size > 1) {
        console.error(chalk_1.default.red(`Found a total of ${diagnostics.length} errors in ${files.size} files\n`));
    }
    for (const [file, amount] of files.entries()) {
        console.error(chalk_1.default.red(`Found ${amount} error${amount === 1 ? '' : 's'} in ${node_path_1.default.relative(root, file)}`));
    }
}
function fileExists(p) {
    try {
        node_fs_1.default.statSync(p);
        return true;
    }
    catch {
        return false;
    }
}
async function main() {
    const args = await (0, yargs_1.default)((0, helpers_1.hideBin)(process.argv)).help(false).version(version).argv;
    if (args.help || args.h) {
        console.log(help);
        return process.exit(0);
    }
    // Detects unknown arguments
    for (const key in args) {
        if (key === '_' || key === '$0') {
            continue;
        }
        switch (key) {
            case 'cwd':
            case 'project':
            case 'p':
            case 's':
            case 'simplified':
                continue;
            default:
                console.error(`Unknown argument: ${key}. Run --help for more information.`);
                return process.exit(1);
        }
    }
    const root = args.cwd ? String(args.cwd) : process.cwd();
    const tsconfigPath = String(args.project || args.p || 'tsconfig.json');
    const simplified = !!(args.simplified || args.s);
    const diagnosticFormatter = !process.stdout.isTTY || simplified
        ? typescript_1.default.formatDiagnostics
        : typescript_1.default.formatDiagnosticsWithColorAndContext;
    if (!fileExists(tsconfigPath)) {
        console.error((!simplified ? chalk_1.default.red : String)(`Could not find ${tsconfigPath}`));
        return process.exit(1);
    }
    const tsconfig = readCompilerOptions(tsconfigPath);
    const diagnosticHost = {
        getCurrentDirectory: typescript_1.default.sys.getCurrentDirectory,
        getCanonicalFileName: (fileName) => fileName,
        getNewLine: () => typescript_1.default.sys.newLine
    };
    if (tsconfig.errors) {
        console.error(diagnosticFormatter(tsconfig.errors, diagnosticHost));
        return process.exit(1);
    }
    let files = tsconfig.fileNames;
    if (args._.length) {
        // Prefer the files passed as arguments, otherwise use the files in tsconfig.json
        files = [];
        for (let i = 0; i < args._.length; i++) {
            const file = String(args._[i]);
            if (!fileExists(file)) {
                console.error((!simplified ? chalk_1.default.red : String)(`Could not find provided '${file}' file.`));
                return process.exit(1);
            }
            if (!file.match(/(t|j)sx$/)) {
                console.warn((!simplified ? chalk_1.default.yellow : String)(`Provided '${file}' file is not a TSX/JSX file.`));
                continue;
            }
            files.push(file);
        }
    }
    if (!files.length) {
        console.error((!simplified ? chalk_1.default.red : String)('No files were found to check.'));
        return process.exit(1);
    }
    const program = typescript_1.default.createProgram(files, tsconfig.options);
    const typeChecker = program.getTypeChecker();
    const sources = program.getSourceFiles();
    const diagnostics = [];
    for (const source of sources) {
        const filename = source.fileName;
        // Not a tsx file, so don't do anything
        if (!filename.match(/(t|j)sx$/)) {
            continue;
        }
        typescript_1.default.forEachChild(source, function loopSourceNodes(node) {
            (0, util_1.recursiveDiagnoseJsxElements)(typescript_1.default, node, typeChecker, diagnostics);
        });
    }
    if (diagnostics.length) {
        const hasError = diagnostics.some((diagnostic) => diagnostic.category === typescript_1.default.DiagnosticCategory.Error);
        console.error(diagnosticFormatter(diagnostics, diagnosticHost));
        if (!simplified) {
            prettyPrintErrorCount(diagnostics, root);
        }
        process.exit(hasError ? 1 : 2);
    }
    console.log(chalk_1.default.green(`No XSS vulnerabilities found in ${files.length} files!`));
    process.exit(0);
}
main().catch(console.error);
//# sourceMappingURL=cli.js.map