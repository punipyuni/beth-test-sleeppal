import ts, { type JsxFragment } from 'typescript';
import type { Diagnostic, JsxElement, JsxOpeningElement, Node, default as TS, Type, TypeChecker } from 'typescript/lib/tsserverlibrary';
/** If the node is a JSX element or fragment */
export declare function isJsx(ts: typeof TS, node: TS.Node): node is JsxElement | JsxFragment;
export declare function recursiveDiagnoseJsxElements(ts: typeof TS, node: Node, typeChecker: TypeChecker, original: Diagnostic[]): void;
export declare function diagnoseJsxElement(ts: typeof TS, node: JsxElement | JsxFragment, typeChecker: TypeChecker, diagnostics: Diagnostic[]): void;
export declare function isSafeAttribute(ts: typeof TS, type: Type | undefined, checker: TypeChecker, node: ts.Node): boolean;
export declare function getSafeAttribute(element: JsxOpeningElement): ts.JsxAttributeLike | undefined;
export declare function proxyObject<T extends object>(obj: T): T;
//# sourceMappingURL=util.d.ts.map